---
name: Deploy

on:
  workflow_dispatch:
    inputs:
      reason:
        required: true
        description: 'Reason for running this workflow'
  push:
    branches:
      - main

    # Don't trigger if it's just a documentation update
    paths-ignore:
      - '**.md'
      - '**.MD'
      - '**.yml'
      - 'LICENSE'
      - '.gitattributes'
      - '.gitignore'
      - '.dockerignore'

# Set workflow-wide environment variables
#  - REPO: repo name on dockerhub
#  - IMAGE: image name on dockerhub
env:
  DOCKERHUB_REPO: mikenye
  DOCKERHUB_IMAGE: dump978
  GHCR_IMAGE: ${{ github.repository }}
  GHCR_REGISTRY: ghcr.io
  PUSH_IMAGES: true

jobs:

  workflow-dispatch:
    name: Triggered via Workflow Dispatch?
    # only run this step if workflow dispatch triggered
    # log the reason the workflow dispatch was triggered
    if: |
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.reason != ''
    runs-on: ubuntu-latest
    steps:
      - name: Log dispatch reason
        env:
          INPUTS_REASON: ${{ github.event.inputs.reason }}
        run: |
          echo "Workflow dispatch reason: $INPUTS_REASON"

  hadolint:
    name: Run hadolint against docker files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Pull hadolint/hadolint:latest Image
        run: docker pull hadolint/hadolint:latest
      - name: Run hadolint against Dockerfiles
        run: docker run --rm -i -v "$PWD":/workdir --workdir /workdir --entrypoint hadolint hadolint/hadolint --ignore DL3003 --ignore DL3006 --ignore DL3010 --ignore DL4001 --ignore DL3007 --ignore DL3008 --ignore SC2068 --ignore DL3007 --ignore SC1091 --ignore DL3013 --ignore DL3010 $(find . -type f -iname "Dockerfile*")

  deploy_multiarch:
    name: Deploy (Multi-Arch)
    needs: [hadolint]
    runs-on: ubuntu-latest
    steps:

      # Check out our code
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Log into docker hub (so we can push images)
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKERHUB_REPO }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Log into ghcr.io
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Get metadata from repo
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_NAME }}

      # Set up QEMU for multi-arch builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      # Set up buildx for multi platform builds
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      # Build "latest"
      - name: Build & Push - latest
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          no-cache: true
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          push: ${{ env.PUSH_IMAGES }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: |
            ${{ env.DOCKERHUB_REPO }}/${{ env.DOCKERHUB_IMAGE }}:latest
            ghcr.io/${{ env.GHCR_IMAGE }}:latest

      # Get version from "latest"
      - name: Get latest image version
        id: get-image-version
        run: |
          set -x
          docker pull "${{ env.DOCKERHUB_REPO }}/${{ env.DOCKERHUB_IMAGE }}:latest"
          VERSION_TAG="$(docker run --rm --entrypoint cat ${{ env.DOCKERHUB_REPO }}/${{ env.DOCKERHUB_IMAGE }}:latest /CONTAINER_VERSION)"
          echo "::set-output name=imageversion::$VERSION_TAG"

      # Show version from "latest"
      - name: Show latest image version
        run: |
          echo "${{ env.DOCKERHUB_REPO }}/${{ env.DOCKERHUB_IMAGE }}:latest contains version: ${{ steps.get-image-version.outputs.imageversion }}"

      # Build version specific
      - name: Build & Push - version specific
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          no-cache: false
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          push: ${{ env.PUSH_IMAGES }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: |
            ${{ env.DOCKERHUB_REPO }}/${{ env.DOCKERHUB_IMAGE }}:${{ steps.get-image-version.outputs.imageversion }}
            ghcr.io/${{ env.GHCR_IMAGE }}:${{ steps.get-image-version.outputs.imageversion }}

      # Patch dockerfile to remove healthcheck
      - name: Patch Dockerfile to remove healthcheck
        run: sed '/^HEALTHCHECK /d' < Dockerfile > Dockerfile.nohealthcheck

      # Build "latest_nohealthcheck"
      - name: Build & Push - latest nohealthcheck
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.nohealthcheck
          no-cache: false
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          push: ${{ env.PUSH_IMAGES }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: |
            ${{ env.DOCKERHUB_REPO }}/${{ env.DOCKERHUB_IMAGE }}:latest_nohealthcheck
            ghcr.io/${{ env.GHCR_IMAGE }}:latest_nohealthcheck

      # Build version specific _nohealthcheck
      - name: Build & Push - version specific nohealthcheck
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.nohealthcheck
          no-cache: false
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          push: ${{ env.PUSH_IMAGES }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: |
            ${{ env.DOCKERHUB_REPO }}/${{ env.DOCKERHUB_IMAGE }}:${{ steps.get-image-version.outputs.imageversion }}_nohealthcheck
            ghcr.io/${{ env.GHCR_IMAGE }}:${{ steps.get-image-version.outputs.imageversion }}_nohealthcheck

  deploy_single_arch:
    name: Deploy
    needs: [hadolint]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        docker-platform:
          - linux/amd64
          - linux/arm64
          - linux/arm/v7

    steps:

      # Check out our code
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Set up QEMU for multi-arch builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      # Log into docker hub (so we can push images)
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKERHUB_REPO }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Log into ghcr.io (so we can push images)
      - name: Login to ghcr.io
        uses: docker/login-action@v1
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Get metadata from repo
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_NAME }}

      # Set up buildx for multi platform builds
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      # Get archictecture suffix
      - name: Get image architecture suffix
        id: get-arch-suffix
        run: |
          set -x
          ARCH_SUFFIX="$(echo '${{ matrix.docker-platform }}' | cut -d '/' -f2- | tr -s '/' '_')"
          echo "::set-output name=archsuffix::$ARCH_SUFFIX"

      # Show archictecture suffix
      - name: Show image architecture suffix
        run: |
          echo "Architecture suffix: ${{ steps.get-arch-suffix.outputs.archsuffix }}"

      # Build "latest"
      - name: Build & Push - latest
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          no-cache: true
          platforms: ${{ matrix.docker-platform }}
          push: ${{ env.PUSH_IMAGES }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: |
            ${{ env.DOCKERHUB_REPO }}/${{ env.DOCKERHUB_IMAGE }}:latest_${{ steps.get-arch-suffix.outputs.archsuffix }}
            ghcr.io/${{ env.GHCR_IMAGE }}:latest

      # Get version from "latest"
      - name: Get latest image version
        id: get-image-version
        run: |
          set -x
          docker pull "${{ env.DOCKERHUB_REPO }}/${{ env.DOCKERHUB_IMAGE }}:latest_${{ steps.get-arch-suffix.outputs.archsuffix }}"
          VERSION_TAG="$(docker run --rm --entrypoint cat ${{ env.DOCKERHUB_REPO }}/${{ env.DOCKERHUB_IMAGE }}:latest_${{ steps.get-arch-suffix.outputs.archsuffix }} /CONTAINER_VERSION)"
          echo "::set-output name=imageversion::$VERSION_TAG"

      # Show version from "latest"
      - name: Show latest image version
        run: |
          echo "${{ env.DOCKERHUB_REPO }}/${{ env.DOCKERHUB_IMAGE }}:latest contains version: ${{ steps.get-image-version.outputs.imageversion }}"

      # Build version specific
      - name: Build & Push - version specific
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          no-cache: false
          platforms: ${{ matrix.docker-platform }}
          push: ${{ env.PUSH_IMAGES }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: |
            ${{ env.DOCKERHUB_REPO }}/${{ env.DOCKERHUB_IMAGE }}:${{ steps.get-image-version.outputs.imageversion }}_${{ steps.get-arch-suffix.outputs.archsuffix }}
            ghcr.io/${{ env.GHCR_IMAGE }}:${{ steps.get-image-version.outputs.imageversion }}

      # Patch dockerfile to remove healthcheck
      - name: Patch Dockerfile to remove healthcheck
        run: sed '/^HEALTHCHECK /d' < Dockerfile > Dockerfile.nohealthcheck

      # Build "latest_nohealthcheck"
      - name: Build & Push - latest nohealthcheck
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.nohealthcheck
          no-cache: false
          platforms: ${{ matrix.docker-platform }}
          push: ${{ env.PUSH_IMAGES }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: |
            ${{ env.DOCKERHUB_REPO }}/${{ env.DOCKERHUB_IMAGE }}:latest_nohealthcheck_${{ steps.get-arch-suffix.outputs.archsuffix }}
            ghcr.io/${{ env.GHCR_IMAGE }}:latest_nohealthcheck

      # Build version specific _nohealthcheck
      - name: Build & Push - version specific nohealthcheck
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.nohealthcheck
          no-cache: false
          platforms: ${{ matrix.docker-platform }}
          push: ${{ env.PUSH_IMAGES }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: |
            ${{ env.DOCKERHUB_REPO }}/${{ env.DOCKERHUB_IMAGE }}:${{ steps.get-image-version.outputs.imageversion }}_nohealthcheck_${{ steps.get-arch-suffix.outputs.archsuffix }}
            ghcr.io/${{ env.GHCR_IMAGE }}:${{ steps.get-image-version.outputs.imageversion }}_nohealthcheck
